{"version":3,"sources":["../../src/handlers/proxy.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,gCAAY,IAAI,iBAAI,MAAR,EAAhB;;AAEO,IAAI,8CAAmB,UAAS,EAAC,GAAD,EAAM,QAAQ,EAAC,eAAD,EAAd,EAAT,EAA2C;AACvE,SAAO,UAAS,CAAT,EAAY,MAAM,EAAlB,EAAsB,KAAK,0BAAE,IAA7B,EAAmC;AACxC,QAAI,WAAW,cAAI,KAAJ,CAAU,EAAE,cAAF,CAAiB,YAA3B,EAAyC,QAAxD;AACA,QAAI,aAAa,GAAjB,EAAsB;AACpB,QAAE,IAAF,GAAU,GAAE,QAAS,GAAE,EAAE,IAAK,EAA9B;AACD;;AAED,QAAI,GAAJ,CAAQ,KAAR,CAAc;AACZ,kBAAY,SADA;AAEZ,WAAK;AAFO,KAAd;;AAKA,QAAI,0BAAE,KAAF,CACF,EADE,EAEF,0BAAE,IAAF,CAAO,CAAP,EAAU,CAAC,gBAAD,CAAV,CAFE,EAGF,EAAC,GAAD,EAHE,CAAJ;;AAMA,sBAAU,MAAV,CAAiB;AACf,oBAAc,eADC;AAEf,qBAAe,SAFA;AAGf,sBAAgB,iBAHD;AAIf,eAAS,MAJM;AAKf,eAAS,KAAK,SAAL,CAAe,CAAf,CALM;AAMf,iBAAW;AANI,KAAjB,EAOG,UAAS,GAAT,EAAc,IAAd,EAAoB;AACrB,UAAI,GAAJ,EAAS;AACP,YAAI,GAAJ,CAAQ,KAAR,CAAc,EAAC,GAAD,EAAd;AACA,eAAO,GAAG,GAAH,CAAP;AACD;;AAED,UAAI,OAAO,KAAK,OAAL,GAAe,KAAK,KAAL,CAAW,KAAK,OAAhB,CAAf,GAA0C,SAArD;AACA,aAAO,KAAK,OAAZ;;AAEA,UAAI,GAAJ,CAAQ,KAAR,CAAc;AACZ,oBAAY,UADA;AAEZ,aAAK,IAFO;AAGZ,qBAAa;AAHD,OAAd;;AAMA,SAAG,SAAH,EAAc,IAAd;AACD,KAvBD;AAwBD,GAzCD;AA0CD,CA3CM","file":"proxy.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport url from 'url';\n\nlet awsLambda = new aws.Lambda();\n\nexport let makeProxyHandler = function({app, lambda: {awsFunctionName}}) {\n  return function(e, ctx = {}, cb = _.noop) {\n    let basePath = url.parse(e.stageVariables.API_BASE_URL).pathname;\n    if (basePath !== '/') {\n      e.path = `${basePath}${e.path}`;\n    }\n\n    app.log.trace({\n      tag_lambda: 'request',\n      req: e\n    });\n\n    e = _.merge(\n      {},\n      _.omit(e, ['requestContext']),\n      {ctx}\n    );\n\n    awsLambda.invoke({\n      FunctionName: awsFunctionName,\n      ClientContext: undefined,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: JSON.stringify(e),\n      Qualifier: '$LATEST'\n    }, function(err, data) {\n      if (err) {\n        app.log.error({err});\n        return cb(err);\n      }\n\n      let body = data.Payload ? JSON.parse(data.Payload) : undefined;\n      delete data.Payload;\n\n      app.log.trace({\n        tag_lambda: 'response',\n        res: body,\n        lambda_data: data\n      });\n\n      cb(undefined, body);\n    });\n  };\n};\n\nexport default makeProxyHandler;\n"]}