{"version":3,"sources":["../../src/handlers/proxy.js"],"names":[],"mappings":"oJAAA;AACA;AACA,kD;;AAEA,IAAI,UAAU,GAAG,IAAI,gBAAI,MAAR,EAAjB,C;;AAEO,IAAI,gBAAgB,GAAG,UAAS,EAAC,GAAD,EAAM,MAAM,EAAE,EAAC,eAAD,EAAd,EAAT,EAA2C;AACvE,SAAO,UAAS,CAAT,EAAY,GAAG,GAAG,EAAlB,EAAsB,EAAE,GAAG,yBAAE,IAA7B,EAAmC;AACxC,QAAI,QAAQ,GAAG,aAAI,KAAJ,CAAU,CAAC,CAAC,cAAF,CAAiB,YAA3B,EAAyC,QAAxD;AACA,QAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB,MAAA,CAAC,CAAC,IAAF,GAAU,GAAE,QAAS,GAAE,CAAC,CAAC,IAAK,EAA9B;AACD;;AAED,IAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAc;AACZ,MAAA,UAAU,EAAE,SADA;AAEZ,MAAA,GAAG,EAAE,CAFO,EAAd;;;AAKA,IAAA,CAAC,GAAG,yBAAE,KAAF;AACF,MADE;AAEF,6BAAE,IAAF,CAAO,CAAP,EAAU,CAAC,gBAAD,CAAV,CAFE;AAGF,MAAC,GAAD,EAHE,CAAJ;;;AAMA,uBAAW,MAAX,CAAkB;AAChB,MAAA,YAAY,EAAE,eADE;AAEhB,MAAA,aAAa,EAAE,SAFC;AAGhB,MAAA,cAAc,EAAE,iBAHA;AAIhB,MAAA,OAAO,EAAE,MAJO;AAKhB,MAAA,OAAO,EAAE,IAAI,CAAC,SAAL,CAAe,CAAf,CALO;AAMhB,MAAA,SAAS,EAAE,SANK,EAAlB;AAOG,cAAS,GAAT,EAAc,IAAd,EAAoB;AACrB,UAAI,GAAJ,EAAS;AACP,QAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAc,EAAC,GAAD,EAAd;AACA,eAAO,EAAE,CAAC,GAAD,CAAT;AACD;;AAED,UAAI,IAAI,GAAG,IAAI,CAAC,OAAL,GAAe,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,OAAhB,CAAf,GAA0C,SAArD;AACA,aAAO,IAAI,CAAC,OAAZ;;AAEA,MAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAc;AACZ,QAAA,UAAU,EAAE,UADA;AAEZ,QAAA,GAAG,EAAE,IAFO;AAGZ,QAAA,WAAW,EAAE,IAHD,EAAd;;;AAMA,MAAA,EAAE,CAAC,SAAD,EAAY,IAAZ,CAAF;AACD,KAvBD;AAwBD,GAzCD;AA0CD,CA3CM,C","file":"proxy.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport url from 'url';\n\nlet _awsLambda = new aws.Lambda();\n\nexport let makeProxyHandler = function({app, lambda: {awsFunctionName}}) {\n  return function(e, ctx = {}, cb = _.noop) {\n    let basePath = url.parse(e.stageVariables.API_BASE_URL).pathname;\n    if (basePath !== '/') {\n      e.path = `${basePath}${e.path}`;\n    }\n\n    app.log.trace({\n      tag_lambda: 'request',\n      req: e\n    });\n\n    e = _.merge(\n      {},\n      _.omit(e, ['requestContext']),\n      {ctx}\n    );\n\n    _awsLambda.invoke({\n      FunctionName: awsFunctionName,\n      ClientContext: undefined,\n      InvocationType: 'RequestResponse',\n      LogType: 'None',\n      Payload: JSON.stringify(e),\n      Qualifier: '$LATEST'\n    }, function(err, data) {\n      if (err) {\n        app.log.error({err});\n        return cb(err);\n      }\n\n      let body = data.Payload ? JSON.parse(data.Payload) : undefined;\n      delete data.Payload;\n\n      app.log.trace({\n        tag_lambda: 'response',\n        res: body,\n        lambda_data: data\n      });\n\n      cb(undefined, body);\n    });\n  };\n};\n\nexport default makeProxyHandler;\n"]}