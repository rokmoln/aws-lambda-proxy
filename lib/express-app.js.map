{"version":3,"sources":["../src/express-app.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,IAAI,0BAAS,UAAS,OAAT,EAAkB;AACpC,MAAI,MAAM,wBAAV;;AAEA,MAAI,OAAJ,CAAY,cAAZ;AACA,MAAI,OAAJ,CAAY,MAAZ;AACA,MAAI,MAAJ,CAAW,aAAX;AACA,MAAI,GAAJ,CAAQ,4BAAR;AACA,MAAI,GAAJ,CAAQ,qBAAW,GAAX,CAAe,EAAC,MAAM,KAAP,EAAf,CAAR;;AAEA,MAAI,GAAJ,GAAU,QAAQ,GAAlB;AACA,MAAI,GAAJ,GAAU,QAAQ,GAAlB;;AAEA,MAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,IAAd,EAAoB,IAApB,EAA0B;AAChC;AACA,QAAI,0BAAE,OAAF,CAAU,IAAI,IAAd,CAAJ,EAAyB;AACvB,aAAO,IAAI,IAAX;AACD;;AAED,QAAI,IAAI,IAAJ,KAAa,SAAjB,EAA4B;AAC1B,aAAO,MAAP;AACD;AACD,QAAI,UAAU,0BAAE,IAAF,CAAO,GAAP,EAAY,CACxB,YADwB,EAExB,gBAFwB,EAGxB,QAHwB,EAIxB,YAJwB,EAKxB,MALwB,EAMxB,KANwB,EAOxB,QAPwB,CAAZ,CAAd;AASA,QAAI,QAAQ,IAAR,YAAwB,MAA5B,EAAoC;AAClC,cAAQ,IAAR,GAAe,QAAQ,IAAR,CAAa,QAAb,EAAf;AACD;AACD,YAAQ,GAAR,CAAY,KAAZ,CAAkB,EAAC,KAAK,OAAN,EAAlB;AACA;AACD,GAvBD;;AAyBA,MAAI,GAAJ,CAAQ,SAAR,EAAmB,UAAS,IAAT,EAAe,GAAf,EAAoB,KAApB,EAA2B;AAC5C,QAAI,UAAJ,CAAe,GAAf;AACD,GAFD;;AAIA,MAAI,GAAJ,CAAQ,UAAS,GAAT,EAAc,IAAd,EAAoB,GAApB,EAAyB,KAAzB,EAAgC;AACtC,QAAI,0BAAE,KAAF,CAAQ,GAAR,CAAJ,EAAkB;AAChB,aAAO,IAAI,UAAJ,CAAe,GAAf,CAAP;AACD;AACD,YAAQ,GAAR,CAAY,KAAZ,CAAkB,EAAC,GAAD,EAAlB;AACA,WAAO,IAAI,UAAJ,CAAe,GAAf,CAAP;AACD,GAND;;AAQA,SAAO,GAAP;AACD,CAlDM;;AAoDA,IAAI;AAAA,sCAAc,WAAe,EAAC,GAAD,EAAM,OAAN,EAAf,EAA+B;AACtD,QAAI,kBAAkB,EAAtB;AACA,QAAI,YAAY,CACd,KADc,EAEd,KAFc,EAGd,QAHc,EAId,0BAAE,SAAF,CAAY,QAAQ,GAAR,CAAY,UAAxB,EAAoC,cAApC,CAJc,EAKd,QAAQ,GAAR,CAAY,cALE,EAMd,UANc,EAOd,IAPc,CAOT,GAPS,CAAhB;;AASA,8BAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,UAAI;AACF,uBADE;AAEF;AAFE,UAGA,MAHJ;;AAKA,gCAAE,OAAF,CAAU,SAAV,EAAqB,UAAS,QAAT,EAAmB;AACtC;AACA,mBAAW,0BAAE,OAAF,CAAU,QAAV,EAAoB,cAApB,EAAoC,GAApC,CAAX;AACA,mBAAY,GAAE,QAAS,GAAvB;AACA,YAAI,MAAM;AACR,wBAAc,GADN;AAER,oCAA0B,YAAW;AACnC,mBAAO,KAAK,IAAZ,CADmC,CACjB;AACnB,WAJO;AAKR,wBAAc,eALN;AAMR,2BAAiB,QANT;AAOR,8BAAqB,GAAE,SAAU,IAAG,eAAgB;AAP5C,SAAV;;AAUA,wBAAgB,IAAhB,CAAqB;AACnB,aADmB;AAEnB,gBAFmB;AAGnB;AAHmB,SAArB;AAKD,OAnBD;AAoBD,KA1BD;;AA4BA,YAAQ,GAAR,CAAY,0BAAE,GAAF,CAAM,eAAN;AAAA,2CAAuB,WAAe,EAAC,GAAD,EAAM,MAAN,EAAc,QAAd,EAAf,EAAwC;AACzE,YAAI,QAAQ;AACV,aADU;AAEV,gBAFU;AAGV,kBAHU;AAIV,yBAAe;AAJL,SAAZ;;AAOA,cAAM,cAAI,KAAJ,CAAU,aAAV,CAAwB,EAAC,kBAAD,EAAM,KAAN,EAAxB,CAAN;AACA,cAAM,aAAN,CAAoB,GAApB,CAAwB,MAAM,QAA9B,EAAwC,QAAQ,UAAR,CAAmB,KAAnB,CAAxC;AACD,OAVW;;AAAA;AAAA;AAAA;AAAA,SAAZ;AAWD,GAlDU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAoDA,IAAI,kCAAa,UAAS,KAAT,EAAgB;AACtC,UAAQ,0BAAE,SAAF,CAAY,KAAZ,CAAR;;AAEA;AAAA,yCAAO,WAAe,GAAf,EAAoB,GAApB,EAAyB,KAAzB,EAAgC;AACrC,UAAI;AACF,gBADE;AAEF;AAFE,UAGA,cAAI,KAAJ,CAAU,IAAI,WAAd,EAA2B,IAA3B,CAHJ;;AAKA,UAAI,IAAI;AACN,oBAAY,IAAI,MADV;AAEN,cAAM,QAFA;AAGN,+BAAuB,KAHjB;AAIN,iBAAS,IAAI,OAJP;AAKN,cAAM,IAAI,IAAJ,GAAW,IAAI,IAAJ,CAAS,QAAT,EAAX,GAAiC,SALjC;AAMN,wBAAgB,EANV;AAON,wBAAgB;AACd,qBAAW,QAAQ,GAAR,CAAY,cADT;AAEd,iBAAO,OAFO;AAGd,sBAAY,IAAI;AAHF;AAPV,OAAR;;AAcA,YAAM,cAAI,KAAJ,CAAU,SAAV,CAAoB,EAAC,CAAD,EAAI,kBAAJ,EAAS,KAAT,EAAgB,GAAhB,EAAqB,GAArB,EAApB,CAAN;;AAEA,YAAM,MAAN,CAAa,MAAb,CAAoB,CAApB,EAAuB,MAAM,GAA7B,EAAkC,UAAS,GAAT,EAAc,SAAd,EAAyB;AACzD,YAAI,GAAJ,EAAS;AACP,cAAI,GAAJ,CAAQ,GAAR,CAAY,KAAZ,CAAkB,EAAC,GAAD,EAAlB;AACA,iBAAO,IAAI,MAAJ,CAAW,GAAX,CAAP;AACD;AACD,YAAI,MAAJ,CAAW,UAAU,UAArB;AACA,YAAI,GAAJ,CAAQ,UAAU,OAAlB;AACA,YAAI,IAAJ,CAAS,UAAU,IAAnB;AACD,OARD;AASD,KA/BD;;AAAA;AAAA;AAAA;AAAA;AAgCD,CAnCM;;kBAqCQ,O","file":"express-app.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport env from './env';\nimport express from 'express';\nimport url from 'url';\n\nexport let create = function(options) {\n  let app = express();\n\n  app.disable('x-powered-by');\n  app.disable('etag');\n  app.enable('trust proxy');\n  app.use(compression());\n  app.use(bodyParser.raw({type: '*/*'}));\n\n  app.env = options.env;\n  app.log = options.log;\n\n  app.use(function(req, _res, next) {\n    // bodyParser return {} if no body\n    if (_.isEmpty(req.body)) {\n      delete req.body;\n    }\n\n    if (req.path === '/health') {\n      return next();\n    }\n    let slimReq = _.omit(req, [\n      '_parsedUrl',\n      '_readableState',\n      'client',\n      'connection',\n      'host',\n      'res',\n      'socket'\n    ]);\n    if (slimReq.body instanceof Buffer) {\n      slimReq.body = slimReq.body.toString();\n    }\n    options.log.debug({req: slimReq});\n    next();\n  });\n\n  app.get('/health', function(_req, res, _next) {\n    res.sendStatus(200);\n  });\n\n  app.use(function(err, _req, res, _next) {\n    if (_.isNil(err)) {\n      return res.sendStatus(404);\n    }\n    options.log.error({err});\n    return res.sendStatus(500);\n  });\n\n  return app;\n};\n\nexport let loadLambdas = async function({app, lambdas}) {\n  let lambdaLocations = [];\n  let arnPrefix = [\n    'arn',\n    'aws',\n    'lambda',\n    _.defaultTo(process.env.AWS_REGION, 'zz-central-1'),\n    process.env.AWS_ACCOUNT_ID,\n    'function'\n  ].join(':');\n\n  _.forEach(lambdas, function(lambda) {\n    let {\n      awsFunctionName,\n      locations\n    } = lambda;\n\n    _.forEach(locations, function(location) {\n      // location = location.replace(/{([^}]+)\\+}/g, ':$1');\n      location = _.replace(location, /{([^}]+)\\+}/g, '*');\n      location = `${location}$`;\n      let ctx = {\n        awsRequestId: '0',\n        getRemainingTimeInMillis: function() {\n          return 60 * 1000; // FIXME\n        },\n        functionName: awsFunctionName,\n        functionVersion: '$LOCAL',\n        invokedFunctionArn: `${arnPrefix}:${awsFunctionName}:$LOCAL`\n      };\n\n      lambdaLocations.push({\n        ctx,\n        lambda,\n        location\n      });\n    });\n  });\n\n  Promise.all(_.map(lambdaLocations, async function({ctx, lambda, location}) {\n    let route = {\n      ctx,\n      lambda,\n      location,\n      expressRouter: app\n    };\n\n    await env.hooks.preRouteSetup({env, route});\n    route.expressRouter.all(route.location, exports.middleware(route));\n  }));\n};\n\nexport let middleware = function(route) {\n  route = _.cloneDeep(route);\n\n  return async function(req, res, _next) {\n    let {\n      pathname,\n      query\n    } = url.parse(req.originalUrl, true);\n\n    let e = {\n      httpMethod: req.method,\n      path: pathname,\n      queryStringParameters: query,\n      headers: req.headers,\n      body: req.body ? req.body.toString() : undefined,\n      stageVariables: {},\n      requestContext: {\n        accountId: process.env.AWS_ACCOUNT_ID,\n        stage: 'local',\n        httpMethod: req.method\n      }\n    };\n\n    await env.hooks.preHandle({e, env, route, req, res});\n\n    route.lambda.handle(e, route.ctx, function(err, lambdaRes) {\n      if (err) {\n        req.app.log.error({err});\n        return res.status(500);\n      }\n      res.status(lambdaRes.statusCode);\n      res.set(lambdaRes.headers);\n      res.send(lambdaRes.body);\n    });\n  };\n};\n\nexport default exports;\n"]}